name: Build Arch Linux ISO with XFCE

on:
  workflow_dispatch:
    inputs:
      build_date:
        description: 'ISO build timestamp (YYYYMMDD_HHMMSS). Leave empty for current time.'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build_iso:
    runs-on: ubuntu-latest
    container:
      image: archlinux/archlinux:latest
      options: --privileged

    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install archiso and tools
        run: |
          pacman -Sy --noconfirm archiso git squashfs-tools xorriso dosfstools curl util-linux

      - name: Create XFCE archiso profile
        id: prepare_profile
        shell: bash
        run: |
          PROFILE_DIR=archiso_build_profile

          mkdir -p \
            "$PROFILE_DIR/airootfs/root" \
            "$PROFILE_DIR/airootfs/etc/lightdm" \
            "$PROFILE_DIR/airootfs/etc/systemd/system/multi-user.target.wants" \
            "$PROFILE_DIR/airootfs/etc"

          # 1) Package list
          cat > "$PROFILE_DIR/packages.x86_64" << 'EOF'
base
linux
linux-firmware
mkinitcpio
mkinitcpio-archiso
xfce4
xfce4-goodies
xorg-server
xorg-xinit
lightdm
lightdm-gtk-greeter
networkmanager
firefox
htop
iotop
gparted
EOF

          # 2) ISO metadata
          cat > "$PROFILE_DIR/profiledef.sh" << 'EOF'
iso_name="archlinux-xfce"
iso_label="ARCH_XFCE"
iso_publisher="Arch Linux XFCE Custom"
iso_application="Arch Linux XFCE Live ISO"
install_dir="arch"
buildmodes=("iso")
bootmodes=("bios.syslinux.mbr" "uefi-x64.systemd-boot.esp")
arch="x86_64"
airootfs_image_type="squashfs"
file_permissions=(["/etc/shadow"]="0:0:400")
EOF

          # 3) Pull in your custom script
          curl -sSL "https://raw.githubusercontent.com/georgeabr/arch/refs/heads/master/arch.sh" \
            -o "$PROFILE_DIR/airootfs/root/arch.sh"
          chmod +x "$PROFILE_DIR/airootfs/root/arch.sh"

          # 4) Ensure rootâ€™s shell is bash
          cat > "$PROFILE_DIR/airootfs/etc/passwd" << 'EOF'
root:x:0:0:root:/root:/bin/bash
EOF

          # 5) Autostart XFCE as root
          echo "exec startxfce4" > "$PROFILE_DIR/airootfs/root/.xinitrc"

          # 6) Configure LightDM for autologin
          cat > "$PROFILE_DIR/airootfs/etc/lightdm/lightdm.conf" << 'EOF'
[Seat:*]
autologin-user=root
autologin-session=xfce
EOF

          # 7) Enable services
          ln -sf /usr/lib/systemd/system/lightdm.service \
            "$PROFILE_DIR/airootfs/etc/systemd/system/display-manager.service"
          ln -sf /usr/lib/systemd/system/NetworkManager.service \
            "$PROFILE_DIR/airootfs/etc/systemd/system/multi-user.target.wants/NetworkManager.service"

          # 8) Export profile path
          echo "profile_dir=$PROFILE_DIR" >> "$GITHUB_OUTPUT"

      - name: Define build metadata
        id: build_metadata
        shell: bash
        run: |
          BUILD_TIMESTAMP="${{ github.event.inputs.build_date }}"
          [ -z "$BUILD_TIMESTAMP" ] && BUILD_TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          echo "build_timestamp=$BUILD_TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "iso_output_dir=out" >> "$GITHUB_OUTPUT"

      - name: Build the ISO
        id: build_iso
        shell: bash
        run: |
          mkarchiso -v \
            -o "${{ steps.build_metadata.outputs.iso_output_dir }}" \
            "${{ steps.prepare_profile.outputs.profile_dir }}"

          ACTUAL=$(find "${{ steps.build_metadata.outputs.iso_output_dir }}" -type f -name '*.iso' -print -quit)
          [ -z "$ACTUAL" ] && { echo "No ISO generated!" >&2; exit 1; }
          echo "actual_iso_file=$ACTUAL" >> "$GITHUB_OUTPUT"

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: archlinux-xfce-iso-${{ steps.build_metadata.outputs.build_timestamp }}
          path: ${{ steps.build_iso.outputs.actual_iso_file }}
