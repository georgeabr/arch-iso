name: Build Arch Linux ISO with arch.sh, htop, iotop, and KDE Wayland/X11

on:
  workflow_dispatch:
    inputs:
      build_date:
        description: 'ISO Build Timestamp (YYYYMMDD_HHMMSS, leave empty for current time)'
        required: false
        type: string
      profile_name:
        description: 'Name of the archiso profile to use (e.g., "releng" or your custom profile folder)'
        required: false
        type: string
        default: 'releng'

permissions:
  contents: write

jobs:
  build_iso:
    runs-on: ubuntu-latest
    container:
      image: archlinux/archlinux:latest
      options: --privileged

    timeout-minutes: 120

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install archiso and build dependencies within the container
      shell: bash
      run: |
        # Ensure system is fully up-to-date and package databases are synced (forced refresh)
        # Install necessary build tools, including the 'linux' package for version detection on the host
        pacman -Syyu --noconfirm || true # Use || true to allow continuation if no updates are available, or for minor errors
        pacman -Sy --noconfirm archiso git squashfs-tools xorriso dosfstools curl util-linux linux

    - name: Prepare Archiso Build Profile, Add Custom Script, Set Root Shell, and Add Extra Packages
      id: prepare_profile
      shell: bash
      run: |
        PROFILE_DIR="archiso_build_profile"
        INPUT_PROFILE_NAME="${{ github.event.inputs.profile_name }}"
        SCRIPT_URL="https://raw.githubusercontent.com/georgeabr/arch/refs/heads/master/arch.sh"
        SCRIPT_FILENAME="arch.sh"
        SCRIPT_DEST_PATH="$PROFILE_DIR/airootfs/root/$SCRIPT_FILENAME"

        # 1. Copy the chosen archiso profile
        if [ -d "./$INPUT_PROFILE_NAME" ]; then
          echo "Using custom profile from repository: ./$INPUT_PROFILE_NAME"
          cp -r "./$INPUT_PROFILE_NAME" "$PROFILE_DIR"
        elif [ -d "/usr/share/archiso/configs/$INPUT_PROFILE_NAME" ]; then
          echo "Using official archiso profile: /usr/share/archiso/configs/$INPUT_PROFILE_NAME"
          cp -r "/usr/share/archiso/configs/$INPUT_PROFILE_NAME" "$PROFILE_DIR"
        else
          echo "Error: Profile '$INPUT_PROFILE_NAME' not found in repository or official configs."
          exit 1
        fi

        # 2. Add the custom script (arch.sh)
        mkdir -p "$(dirname "$SCRIPT_DEST_PATH")"
        echo "Downloading $SCRIPT_URL to "$SCRIPT_DEST_PATH""
        curl -sSL "$SCRIPT_URL" -o "$SCRIPT_DEST_PATH"
        echo "Setting executable permissions for "$SCRIPT_DEST_PATH""
        chmod +x "$SCRIPT_DEST_PATH"

        # 3. Ensure root's default shell in the ISO is /bin/bash
        PASSWD_FILE="$PROFILE_DIR/airootfs/etc/passwd"
        echo "Ensuring root's shell in "$PASSWD_FILE" is /bin/bash"
        sed -i 's/^root:x:0:0:root:\/root:\/.*$/root:x:0:0:root:\/root:\/bin\/bash/' "$PASSWD_FILE"
        grep '^root:' "$PASSWD_FILE" # For logging, to confirm the change

        # --- Update mirrorlist for airootfs to ensure latest packages are pulled ---
        echo "Fetching and preparing latest mirrorlist for airootfs..."
        mkdir -p "$PROFILE_DIR/airootfs/etc/pacman.d/"
        curl -s "https://archlinux.org/mirrorlist/all/" | sed -e 's/^#Server/Server/' > "$PROFILE_DIR/airootfs/etc/pacman.d/mirrorlist"

        # 4. Add htop and iotop to the list of packages to be installed in the ISO
        PACKAGES_FILE="$PROFILE_DIR/packages.x86_64"
        if [ -f "$PACKAGES_FILE" ]; then
            echo "Adding htop and iotop to "$PACKAGES_FILE""
            echo "htop" >> "$PACKAGES_FILE"
            echo "iotop" >> "$PACKAGES_FILE"
            grep -E '^(htop|iotop)$' "$PACKAGES_FILE" || echo "htop or iotop not found in "$PACKAGES_FILE" after append. Check file format."
        else
            echo "Warning: "$PACKAGES_FILE" not found. Cannot add htop or iotop."
        fi

        # --- Modifications for KDE Wayland and X11 sessions, and specific applications ---
        echo "plasma-workspace" >> "$PROFILE_DIR/packages.x86_64" # Core KDE Plasma, now includes Wayland session
        echo "plasma-x11-session" >> "$PROFILE_DIR/packages.x86_64" # KDE X11 session

        # Remove SDDM, Add GDM
        sed -i '/sddm/d' "$PROFILE_DIR/packages.x86_64" || true # Remove sddm if present
        echo "gdm" >> "$PROFILE_DIR/packages.x86_64" # Add GDM

        # Add specific KDE applications
        echo "dolphin" >> "$PROFILE_DIR/packages.x86_64"
        echo "konsole" >> "$PROFILE_DIR/packages.x86_64"
        echo "partitionmanager" >> "$PROFILE_DIR/packages.x86_64"

        # Add LXDE packages
        echo "lxde" >> "$PROFILE_DIR/packages.x86_64"
        echo "lxsession" >> "$PROFILE_DIR/packages.x86_64"
        echo "openbox" >> "$PROFILE_DIR/packages.x86_64"
        echo "pcmanfm" >> "$PROFILE_DIR/packages.x86_64"

        # Add sudo package
        echo "sudo" >> "$PROFILE_DIR/packages.x86_64"
        # Ensure qt6-base is explicitly added to packages, as plasma-workspace might not pull it in for version query specifically
        echo "qt6-base" >> "$PROFILE_DIR/packages.x86_64"


        # --- Configure Display Manager Service (GDM) ---
        mkdir -p "$PROFILE_DIR/airootfs/etc/systemd/system/"
        # Remove old display-manager symlink if it exists (e.g., from sddm)
        rm -f "$PROFILE_DIR/airootfs/etc/systemd/system/display-manager.service"
        # Enable GDM service to start on boot
        ln -s /usr/lib/systemd/system/gdm.service "$PROFILE_DIR/airootfs/etc/systemd/system/display-manager.service"
        echo "Enabled GDM as the display manager."

        # --- Configure GDM autologin for 'george' user ---
        # Remove old SDDM autologin config if it exists
        rm -f "$PROFILE_DIR/airootfs/etc/sddm.conf.d/autologin.conf" || true
        mkdir -p "$PROFILE_DIR/airootfs/etc/gdm/"
        echo "Configuring GDM autologin for 'george' user."
        # Create or modify /etc/gdm/custom.conf
cat <<EOF > "$PROFILE_DIR/airootfs/etc/gdm/custom.conf"
# GDM configuration file
[daemon]
AutomaticLoginEnable=True
AutomaticLogin=george
EOF
        echo "GDM autologin configured."


        # --- Add _airootfs_root_install function to profiledef.sh to perform a full update and create user inside airootfs ---
        PROFILEDEF_PATH="$PROFILE_DIR/profiledef.sh"
        echo "Checking for _airootfs_root_install function in "$PROFILEDEF_PATH""
        # Temporarily remove existing _airootfs_root_install to ensure a clean addition
        sed -i '/^_airootfs_root_install() {/,/^}$/d' "$PROFILEDEF_PATH" || true
        echo "Adding _airootfs_root_install function to "$PROFILEDEF_PATH" with user creation and verbose logging."

        # Use a heredoc to append the function content directly. The EOF_PROFILEDEF_FUNCTION MUST be at column 1.
cat << 'EOF_PROFILEDEF_FUNCTION' >> "$PROFILEDEF_PATH"
_airootfs_root_install() {
    set -euxo pipefail
    echo "--- Starting _airootfs_root_install function ---"
    echo "Running full system upgrade inside the airootfs..."
    pacman-key --init
    pacman-key --populate archlinux
    pacman -Syyu --noconfirm

    echo "Attempting to create user 'george' with password 'parola' and add to wheel group..."
    if ! id -u george &>/dev/null; then
        echo "'george' user does not exist. Creating now."
        useradd -m -g users -G wheel,storage,power -s /bin/bash george
        echo "Setting password for 'george' user."
        echo 'george:parola' | chpasswd
        echo "User 'george' created and password set successfully."
    else
        echo "User 'george' already exists. Skipping user creation."
    fi
    echo "Verifying 'george' user creation and group membership..."
    id george
    groups george

    echo "Configuring sudoers for wheel group..."
    pacman -S --noconfirm sudo || true
    if grep -q '^# %wheel ALL=(ALL:ALL) ALL' /etc/sudoers; then
        echo "Uncommenting wheel group in sudoers."
        sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
        echo "Sudoers file updated for wheel group."
    else
        echo "Sudoers file already configured for wheel group or line not found as expected. Skipping sudoers modification."
    fi
    echo "Verifying sudoers entry for wheel group..."
    grep '%wheel' /etc/sudoers
    echo "--- Finished _airootfs_root_install function ---"
}
EOF_PROFILEDEF_FUNCTION

        echo "PROFILE_DIR=$PROFILE_DIR" >> "$GITHUB_OUTPUT"

    - name: Define Build Metadata and Output Directory
      id: build_metadata
      shell: bash
      run: |
        if [ -n "${{ github.event.inputs.build_date }}" ]; then
          BUILD_TIMESTAMP="${{ github.event.inputs.build_date }}"
        else
          BUILD_TIMESTAMP=$(date '+%Y%m%d_%H%MMSS')
        fi

        ISO_VERSION_IDENTIFIER="${GITHUB_REF_NAME:-$(echo $GITHUB_SHA | cut -c1-7)}"
        ISO_OUTPUT_DIR="out"

        echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> "$GITHUB_OUTPUT"
        echo "ISO_VERSION_IDENTIFIER=$ISO_VERSION_IDENTIFIER" >> "$GITHUB_OUTPUT"
        echo "ISO_OUTPUT_DIR=$ISO_OUTPUT_DIR" >> "$GITHUB_OUTPUT"

    - name: Build Arch Linux ISO
      id: build_iso_step
      shell: bash
      run: |
        mkarchiso -v -o ${{ steps.build_metadata.outputs.ISO_OUTPUT_DIR }} ${{ steps.prepare_profile.outputs.PROFILE_DIR }}/
        
        ACTUAL_ISO_FILE=$(find ${{ steps.build_metadata.outputs.ISO_OUTPUT_DIR }} -name "*.iso" -print -quit)
        if [ -z "$ACTUAL_ISO_FILE" ]; then
          echo "Error: No ISO file found in ${{ steps.build_metadata.outputs.ISO_OUTPUT_DIR }}"
          exit 1
        fi
        echo "Found ISO: "$ACTUAL_ISO_FILE""
        echo "ACTUAL_ISO_FILE="$ACTUAL_ISO_FILE"" >> "$GITHUB_OUTPUT"

    - name: Extract Kernel Version from ISO
      id: extract_kernel_version
      shell: bash
      run: |
        ISO_FILE="${{ steps.build_iso_step.outputs.ACTUAL_ISO_FILE }}"
        MOUNT_POINT="/mnt/iso_kernel" # Use a dedicated mount point
        
        mkdir -p "$MOUNT_POINT"
        echo "Mounting ISO: "$ISO_FILE" to "$MOUNT_POINT""
        mount -o loop "$ISO_FILE" "$MOUNT_POINT"

        KERNEL_PATH=$(find "$MOUNT_POINT" -name "vmlinuz*" | head -n 1)
        KERNEL_VERSION="Unknown"

        if [ -n "$KERNEL_PATH" ]; then
          echo "Found kernel image at: "$KERNEL_PATH""
          KERNEL_INFO=$(file "$KERNEL_PATH")
          # Extract the version string from the file command output (e.g., "version 6.8.9-arch1-2")
          EXTRACTED_VERSION=$(echo "$KERNEL_INFO" | grep -oP 'version \K[0-9]+\.[0-9]+\.[0-9]+[^ ]*' | head -n 1)
          if [ -n "$EXTRACTED_VERSION" ]; then
            KERNEL_VERSION="$EXTRACTED_VERSION"
          else
            echo "Could not extract specific version from: "$KERNEL_INFO""
          fi
        else
          echo "Could not find vmlinuz file in the ISO."
        fi

        echo "Extracted Kernel Version: "$KERNEL_VERSION""
        echo "KERNEL_VERSION_ISO="$KERNEL_VERSION"" >> "$GITHUB_OUTPUT"

        echo "Unmounting ISO"
        umount "$MOUNT_POINT" || true # Use || true to prevent job failure if unmount fails (e.g., already unmounted)
        rmdir "$MOUNT_POINT" || true

    - name: Extract QT/KDE Version from ISO
      id: extract_desktop_versions
      shell: bash
      run: |
        ISO_FILE="${{ steps.build_iso_step.outputs.ACTUAL_ISO_FILE }}"
        MOUNT_POINT="/mnt/iso_desktop"
        AIROOTFS_PATH="$MOUNT_POINT/airootfs"
        
        mkdir -p "$MOUNT_POINT"
        echo "Mounting ISO: "$ISO_FILE" to "$MOUNT_POINT""
        mount -o loop "$ISO_FILE" "$MOUNT_POINT"

        KDE_VERSION="N/A"
        QT_VERSION="N/A"

        echo "--- Debugging pacman -Q --root issue ---"
        echo "Listing contents of "$AIROOTFS_PATH"/var/lib/pacman/local/ (looking for plasma-workspace-* and qt6-base-*):"
        ls -l "$AIROOTFS_PATH/var/lib/pacman/local/" | grep -E 'plasma-workspace|qt6-base' || echo "No plasma-workspace or qt6-base directories found."

        echo "Attempting to query plasma-workspace:"
        PLASMA_PKG_INFO=$(pacman -Q --root "$AIROOTFS_PATH" plasma-workspace 2>&1 || true)
        echo "Output for plasma-workspace query: "$PLASMA_PKG_INFO""
        if echo "$PLASMA_PKG_INFO" | grep -q "plasma-workspace"; then
            KDE_VERSION=$(echo "$PLASMA_PKG_INFO" | awk '{print $2}' | cut -d'-' -f1)
            echo "Found KDE Plasma (plasma-workspace) version: "$KDE_VERSION""
        else
            echo "plasma-workspace package not found or query failed as expected."
        fi

        echo "Attempting to query qt6-base:"
        QT_PKG_INFO=$(pacman -Q --root "$AIROOTFS_PATH" qt6-base 2>&1 || true)
        echo "Output for qt6-base query: "$QT_PKG_INFO""
        if echo "$QT_PKG_INFO" | grep -q "qt6-base"; then
            QT_VERSION=$(echo "$QT_PKG_INFO" | awk '{print $2}' | cut -d'-' -f1)
            echo "Found Qt6 (qt6-base) version: "$QT_VERSION""
        else
            echo "qt6-base package not found or query failed as expected."
        fi
        echo "--- End Debugging ---"

        echo "KDE_VERSION_ISO="$KDE_VERSION"" >> "$GITHUB_OUTPUT"
        echo "QT_VERSION_ISO="$QT_VERSION"" >> "$GITHUB_OUTPUT"

        echo "Unmounting ISO"
        umount "$MOUNT_POINT" || true
        rmdir "$MOUNT_POINT" || true

    - name: List generated ISOs (for debugging)
      shell: bash
      run: ls -lh ${{ steps.build_metadata.outputs.ISO_OUTPUT_DIR }}

    - name: Upload ISO as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: archlinux-custom-iso-${{ steps.build_metadata.outputs.BUILD_TIMESTAMP }}
        path: ${{ steps.build_iso_step.outputs.ACTUAL_ISO_FILE }}
        retention-days: 7

    - name: Create GitHub Release (Optional)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.build_iso_step.outputs.ACTUAL_ISO_FILE }}
        tag_name: "iso-${{ steps.build_metadata.outputs.BUILD_TIMESTAMP }}"
        name: "Arch Linux Custom ISO ${{ steps.build_metadata.outputs.BUILD_TIMESTAMP }}"
        body: |
          Custom Arch Linux ISO built on ${{ steps.build_metadata.outputs.BUILD_TIMESTAMP }}
          using the ${{ github.event.inputs.profile_name }} archiso profile.
          Includes the 'arch.sh' script in /root/arch.sh.
          Root user's default shell set to /bin/bash.
          Now includes 'htop', 'iotop', KDE Plasma (Wayland and X11 sessions), and LXDE.
          Autologin enabled for 'george' user into KDE X11 session (password: parola).
          Using GDM as the display manager.
          Based on Arch Linux packages available at build time.
          Kernel version (from ISO): ${{ steps.extract_kernel_version.outputs.KERNEL_VERSION_ISO }}
          KDE Plasma version (from ISO): ${{ steps.extract_desktop_versions.outputs.KDE_VERSION_ISO }}
          Qt version (from ISO): ${{ steps.extract_desktop_versions.outputs.QT_VERSION_ISO }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
